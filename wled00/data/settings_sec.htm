<!DOCTYPE html>
<html lang="ru">
<head>
 <meta content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no" name="viewport">
 <meta charset="utf-8">
 <title>Разное Настройки</title>
 <script>
 var d = document;
var loc = false, locip, locproto = "http:";
function H() { window.open("https://kno.wled.ge/features/settings/#security-settings"); }
 function B() { window.open(getURL("/settings"),"_self"); }
 function U() { window.open(getURL("/update"),"_self"); }
 function gId(s) { return d.getElementById(s); }
 function isObj(o) { return (o && typeof o === 'object' && !Array.isArray(o)); }
 // https://www.educative.io/edpresso/how-to-dynamically-load-a-js-file-in-javascript
 function loadJS(FILE_URL, async = true) {
 let scE = d.createElement("script");
scE.setAttribute("src", FILE_URL);
scE.setAttribute("type", "text/javascript");
scE.setAttribute("async", async);
d.body.appendChild(scE);
 // success event
 scE.addEventListener("load", () => {
 GetV();
setBckFilename(gId("bckcfg"));
setBckFilename(gId("bckpresets"));
});
 // error event
 scE.addEventListener("error", (ev) => {
 console.log("Ошибка при загрузке файла", ev);
alert("Не удалось загрузить скрипт конфигурации.\nНе завершенные данные страницы!");
});
}
 var timeout;
function showToast(text, error = false) {
 var x = gId("toast");
x.innerHTML = text;
x.classList.add(error ? "error":"show");
clearTimeout(timeout);
x.style.animation = 'none';
timeout = setTimeout(function(){ x.classList.remove("show"); }, 2900);
}
 function uploadFile(fO,name) {
 var req = new XMLHttpRequest();
req.addEventListener('load', function(){showToast(this.responseText,this.status >= 400)});
req.addEventListener('error', function(e){showToast(e.stack,true);});
req.open("POST", getURL("/upload"));
var formData = new FormData();
formData.append("data", fO.files[0], name);
req.send(formData);
fO.value = '';
return false;
}
 function checkNum(o) {
 const specialkeys = ["Backspace", "Tab", "Enter", "Shift", "Control", "Alt", "Pause", "CapsLock", "Escape", "Space", "PageUp", "PageDown", "End", "Home", "ArrowLeft", "ArrowUp", "ArrowRight", "ArrowDown", "Insert", "Delete"];
// true if key is a number or a special key
 if(event.key.match(/[0-9]/) || specialkeys.includes(event.key)) return true;
event.preventDefault();
return false;
}
 function setBckFilename(x) {
 x.setAttribute("download","wled_" + x.getAttribute("download") + (sd=="WLED"?"":("_" +sd)));
}
 function S() {
 let l = window.location;
if (l.protocol == "file:") {
 loc = true;
locip = localStorage.getItem('locIp');
if (!locip) {
 locip = prompt("Режим файла. Пожалуйста, введите IP WLED!");
localStorage.setItem('locIp', locip);
}
 } else {
 // detect reverse proxy
 let path = l.pathname;
let paths = path.slice(1,path.endsWith('/')?-1:undefined).split("/");
if (paths.length > 2) {
 locproto = l.protocol;
loc = true;
locip = l.hostname + (l.port ? ":" + l.port : "") + "/" + paths[0];
}
 }
 if (loc) {
 gId("bckcfg").setAttribute('href',getURL(gId("bckcfg").pathname));
gId("bckpresets").setAttribute('href',getURL(gId("bckpresets").pathname));
}
 loadJS(getURL('/settings/s.js?p=6'), false); // If we set async false, file is loaded and executed, then next statement is processed
 if (loc) d.Sf.action = getURL('/settings/sec');
}
 function getURL(path) {
 return (loc ? locproto + "//" + locip : "") + path;
}
 </script>
 <style>
 @import url("style.css");
</style>
</head>
<body onload="S()">
 <form id="form_s" name="Sf" method="post">
 <div class="toprow">
 <div class="helpB"><button type="button" onclick="H()">?</button></div>
 <button type="button" onclick="B()">Назад</button><button type="submit">Сохранить</button><hr>
 </div>
 <h2>Настройки безопасности и обновления</h2>
 PIN-код настроек: <input type="password" id="PIN" name="PIN" size="4" maxlength="4" minlength="4" onkeydown="checkNum(this)" pattern="[0-9]*" inputmode="numeric" title="Пожалуйста, введите 4-значный номер"><br>
 <div class="warn">&#9888; ⚠ Не зашифрованная передача. Будьте осторожны при выборе PIN, не используйте PIN коды для банков, дверей, SIM и т.д.!</div><br>
 Блокировка проводного (OTA) обновления ПО: <input type="checkbox" name="NO"><br>
 Пароль: <input type="password" name="OP" maxlength="32"><br>
 Для включения OTA вы также должны ввести правильный пароль!<br>
 Пароль следует менять, когда OTA включен.<br>
 <b>Отключите OTA, когда он не используется, иначе злоумышленник может перепрошить ПО устройства!</b><br>
 <i>Настройки на этой странице можно изменять только если OTA блокировка отключена!</i><br>
 Запретить доступ к настройкам WiFi, если заблокировано: <input type="checkbox" name="OW"><br><br>
 Сброс на заводские настройки: <input type="checkbox" name="RS"><br>
 Все настройки и пресеты будут стерты.<br><br>
 <div class="warn">&#9888; ⚠ Не зашифрованная передача. Злоумышленник в одной сети может перехватить данные формы!</div>
 <hr>
 <h3>Обновление ПО</h3>
 <button type="button" onclick="U()">Ручное обновление OTA</button><br>
 Включить ArduinoOTA: <input type="checkbox" name="AO">
 <hr>
 <h3>Резервное копирование и восстановление</h3>
 <a class="btn lnk" id="bckcfg" href="/presets.json" download="presets">Резервное копирование пресетов</a><br>
 <div>Восстановить пресеты<br><input type="file" name="data" accept=".json"> <button type="button" onclick="uploadFile(d.Sf.data,'/presets.json');">Загрузить</button><br></div><br>
 <a class="btn lnk" id="bckpresets" href="/cfg.json" download="cfg">Резервное копирование конфигурации</a><br>
 <div>Восстановить конфигурацию<br><input type="file" name="data2" accept=".json"> <button type="button" onclick="uploadFile(d.Sf.data2,'/cfg.json');">Загрузить</button><br></div>
 <div class="warn">&#9888; ⚠ Восстановление пресетов/конфигурации перезапишет ваши текущие пресеты/конфигурацию.<br>
 Неправильная конфигурация может потребовать сброса на заводские настройки или перепрошивки вашего ESP.</div>
 По соображениям безопасности пароли не резервируются.
<hr>
 <h3>О программе</h3>
 <a href="https://github.com/Aircoookie/WLED/" target="_blank">WLED</a> версия ##VERSION##<!-- Автозамена из package.json --><br><br>
 <a href="https://github.com/Aircoookie/WLED/wiki/Contributors-and-credits" target="_blank">Contributors, dependencies and special thanks</a><br>
 A huge thank you to everyone who helped me create WLED!<br><br>
 (c) 2016-2024 Christian Schwinne <br>
 <i>Лицензия на <a href="https://github.com/Aircoookie/WLED/blob/master/LICENSE" target="_blank">MIT</a></i><br><br>
 Сообщение сервера: <span class="sip"> Ошибка ответа! </span><hr>
 <div id="toast"></div>
 <button type="button" onclick="B()">Назад</button><button type="submit">Сохранить</button>
 </form>
</body>
</html>
